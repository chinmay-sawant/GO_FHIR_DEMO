// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\service\external_patient_service.go
//
// Generated by this command:
//
//	mockgen -source=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\service\external_patient_service.go -destination=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\service\mocks\mock_external_patient_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	fhir "github.com/samply/golang-fhir-models/fhir-models/fhir"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalPatientServiceInterface is a mock of ExternalPatientServiceInterface interface.
type MockExternalPatientServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExternalPatientServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockExternalPatientServiceInterfaceMockRecorder is the mock recorder for MockExternalPatientServiceInterface.
type MockExternalPatientServiceInterfaceMockRecorder struct {
	mock *MockExternalPatientServiceInterface
}

// NewMockExternalPatientServiceInterface creates a new mock instance.
func NewMockExternalPatientServiceInterface(ctrl *gomock.Controller) *MockExternalPatientServiceInterface {
	mock := &MockExternalPatientServiceInterface{ctrl: ctrl}
	mock.recorder = &MockExternalPatientServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalPatientServiceInterface) EXPECT() *MockExternalPatientServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateExternalPatient mocks base method.
func (m *MockExternalPatientServiceInterface) CreateExternalPatient(ctx context.Context, patient *fhir.Patient) (*fhir.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalPatient", ctx, patient)
	ret0, _ := ret[0].(*fhir.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExternalPatient indicates an expected call of CreateExternalPatient.
func (mr *MockExternalPatientServiceInterfaceMockRecorder) CreateExternalPatient(ctx, patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalPatient", reflect.TypeOf((*MockExternalPatientServiceInterface)(nil).CreateExternalPatient), ctx, patient)
}

// GetExternalPatientByID mocks base method.
func (m *MockExternalPatientServiceInterface) GetExternalPatientByID(ctx context.Context, id string) (*fhir.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalPatientByID", ctx, id)
	ret0, _ := ret[0].(*fhir.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalPatientByID indicates an expected call of GetExternalPatientByID.
func (mr *MockExternalPatientServiceInterfaceMockRecorder) GetExternalPatientByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalPatientByID", reflect.TypeOf((*MockExternalPatientServiceInterface)(nil).GetExternalPatientByID), ctx, id)
}

// GetExternalPatientByIDCached mocks base method.
func (m *MockExternalPatientServiceInterface) GetExternalPatientByIDCached(ctx context.Context, id string) (*fhir.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalPatientByIDCached", ctx, id)
	ret0, _ := ret[0].(*fhir.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalPatientByIDCached indicates an expected call of GetExternalPatientByIDCached.
func (mr *MockExternalPatientServiceInterfaceMockRecorder) GetExternalPatientByIDCached(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalPatientByIDCached", reflect.TypeOf((*MockExternalPatientServiceInterface)(nil).GetExternalPatientByIDCached), ctx, id)
}

// GetExternalPatientByIDDelayed mocks base method.
func (m *MockExternalPatientServiceInterface) GetExternalPatientByIDDelayed(ctx context.Context, id string, timeout time.Duration) (*fhir.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalPatientByIDDelayed", ctx, id, timeout)
	ret0, _ := ret[0].(*fhir.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalPatientByIDDelayed indicates an expected call of GetExternalPatientByIDDelayed.
func (mr *MockExternalPatientServiceInterfaceMockRecorder) GetExternalPatientByIDDelayed(ctx, id, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalPatientByIDDelayed", reflect.TypeOf((*MockExternalPatientServiceInterface)(nil).GetExternalPatientByIDDelayed), ctx, id, timeout)
}

// SearchExternalPatients mocks base method.
func (m *MockExternalPatientServiceInterface) SearchExternalPatients(ctx context.Context, params map[string]string) (*fhir.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchExternalPatients", ctx, params)
	ret0, _ := ret[0].(*fhir.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchExternalPatients indicates an expected call of SearchExternalPatients.
func (mr *MockExternalPatientServiceInterfaceMockRecorder) SearchExternalPatients(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchExternalPatients", reflect.TypeOf((*MockExternalPatientServiceInterface)(nil).SearchExternalPatients), ctx, params)
}
