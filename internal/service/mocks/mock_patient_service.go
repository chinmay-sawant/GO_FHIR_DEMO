// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\service\patient_service.go
//
// Generated by this command:
//
//	mockgen -source=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\service\patient_service.go -destination=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\service\mocks\mock_patient_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "go-fhir-demo/internal/domain"
	reflect "reflect"

	fhir "github.com/samply/golang-fhir-models/fhir-models/fhir"
	gomock "go.uber.org/mock/gomock"
)

// MockPatientServiceInterface is a mock of PatientServiceInterface interface.
type MockPatientServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPatientServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockPatientServiceInterfaceMockRecorder is the mock recorder for MockPatientServiceInterface.
type MockPatientServiceInterfaceMockRecorder struct {
	mock *MockPatientServiceInterface
}

// NewMockPatientServiceInterface creates a new mock instance.
func NewMockPatientServiceInterface(ctrl *gomock.Controller) *MockPatientServiceInterface {
	mock := &MockPatientServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPatientServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientServiceInterface) EXPECT() *MockPatientServiceInterfaceMockRecorder {
	return m.recorder
}

// ConvertFromFHIR mocks base method.
func (m *MockPatientServiceInterface) ConvertFromFHIR(ctx context.Context, fhirPatient *fhir.Patient) (*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertFromFHIR", ctx, fhirPatient)
	ret0, _ := ret[0].(*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertFromFHIR indicates an expected call of ConvertFromFHIR.
func (mr *MockPatientServiceInterfaceMockRecorder) ConvertFromFHIR(ctx, fhirPatient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertFromFHIR", reflect.TypeOf((*MockPatientServiceInterface)(nil).ConvertFromFHIR), ctx, fhirPatient)
}

// ConvertToFHIR mocks base method.
func (m *MockPatientServiceInterface) ConvertToFHIR(ctx context.Context, patient *domain.Patient) (*fhir.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToFHIR", ctx, patient)
	ret0, _ := ret[0].(*fhir.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToFHIR indicates an expected call of ConvertToFHIR.
func (mr *MockPatientServiceInterfaceMockRecorder) ConvertToFHIR(ctx, patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToFHIR", reflect.TypeOf((*MockPatientServiceInterface)(nil).ConvertToFHIR), ctx, patient)
}

// CreatePatient mocks base method.
func (m *MockPatientServiceInterface) CreatePatient(ctx context.Context, fhirPatient *fhir.Patient) (*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatient", ctx, fhirPatient)
	ret0, _ := ret[0].(*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatient indicates an expected call of CreatePatient.
func (mr *MockPatientServiceInterfaceMockRecorder) CreatePatient(ctx, fhirPatient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).CreatePatient), ctx, fhirPatient)
}

// DeletePatient mocks base method.
func (m *MockPatientServiceInterface) DeletePatient(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatient indicates an expected call of DeletePatient.
func (mr *MockPatientServiceInterfaceMockRecorder) DeletePatient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).DeletePatient), ctx, id)
}

// GetPatient mocks base method.
func (m *MockPatientServiceInterface) GetPatient(ctx context.Context, id uint) (*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatient", ctx, id)
	ret0, _ := ret[0].(*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatient indicates an expected call of GetPatient.
func (mr *MockPatientServiceInterfaceMockRecorder) GetPatient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).GetPatient), ctx, id)
}

// GetPatients mocks base method.
func (m *MockPatientServiceInterface) GetPatients(ctx context.Context, limit, offset int) ([]*domain.Patient, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatients", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Patient)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPatients indicates an expected call of GetPatients.
func (mr *MockPatientServiceInterfaceMockRecorder) GetPatients(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatients", reflect.TypeOf((*MockPatientServiceInterface)(nil).GetPatients), ctx, limit, offset)
}

// PatchPatient mocks base method.
func (m *MockPatientServiceInterface) PatchPatient(ctx context.Context, id uint, updates map[string]any) (*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPatient", ctx, id, updates)
	ret0, _ := ret[0].(*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchPatient indicates an expected call of PatchPatient.
func (mr *MockPatientServiceInterfaceMockRecorder) PatchPatient(ctx, id, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).PatchPatient), ctx, id, updates)
}

// UpdatePatient mocks base method.
func (m *MockPatientServiceInterface) UpdatePatient(ctx context.Context, id uint, fhirPatient *fhir.Patient) (*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatient", ctx, id, fhirPatient)
	ret0, _ := ret[0].(*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockPatientServiceInterfaceMockRecorder) UpdatePatient(ctx, id, fhirPatient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).UpdatePatient), ctx, id, fhirPatient)
}
