// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\api\routes\routes.go
//
// Generated by this command:
//
//	mockgen -source=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\api\routes\routes.go -destination=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\api\routes\mocks\mock_routes.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	handlers "go-fhir-demo/internal/api/handlers"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockRouteSetupInterface is a mock of RouteSetupInterface interface.
type MockRouteSetupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteSetupInterfaceMockRecorder
	isgomock struct{}
}

// MockRouteSetupInterfaceMockRecorder is the mock recorder for MockRouteSetupInterface.
type MockRouteSetupInterfaceMockRecorder struct {
	mock *MockRouteSetupInterface
}

// NewMockRouteSetupInterface creates a new mock instance.
func NewMockRouteSetupInterface(ctrl *gomock.Controller) *MockRouteSetupInterface {
	mock := &MockRouteSetupInterface{ctrl: ctrl}
	mock.recorder = &MockRouteSetupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteSetupInterface) EXPECT() *MockRouteSetupInterfaceMockRecorder {
	return m.recorder
}

// SetupRoutes mocks base method.
func (m *MockRouteSetupInterface) SetupRoutes(patientHandler handlers.PatientHandlerInterface, externalPatientHandler handlers.ExternalPatientHandlerInterface) *gin.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupRoutes", patientHandler, externalPatientHandler)
	ret0, _ := ret[0].(*gin.Engine)
	return ret0
}

// SetupRoutes indicates an expected call of SetupRoutes.
func (mr *MockRouteSetupInterfaceMockRecorder) SetupRoutes(patientHandler, externalPatientHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRoutes", reflect.TypeOf((*MockRouteSetupInterface)(nil).SetupRoutes), patientHandler, externalPatientHandler)
}
