// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\api\handlers\cron\cronjob_handler.go
//
// Generated by this command:
//
//	mockgen -source=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\api\handlers\cron\cronjob_handler.go -destination=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\api\handlers\cron\mocks\mock_cronjob_handler.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockCronJobHandlerInterface is a mock of CronJobHandlerInterface interface.
type MockCronJobHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCronJobHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockCronJobHandlerInterfaceMockRecorder is the mock recorder for MockCronJobHandlerInterface.
type MockCronJobHandlerInterfaceMockRecorder struct {
	mock *MockCronJobHandlerInterface
}

// NewMockCronJobHandlerInterface creates a new mock instance.
func NewMockCronJobHandlerInterface(ctrl *gomock.Controller) *MockCronJobHandlerInterface {
	mock := &MockCronJobHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockCronJobHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronJobHandlerInterface) EXPECT() *MockCronJobHandlerInterfaceMockRecorder {
	return m.recorder
}

// TriggerCleanupJob mocks base method.
func (m *MockCronJobHandlerInterface) TriggerCleanupJob(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TriggerCleanupJob", c)
}

// TriggerCleanupJob indicates an expected call of TriggerCleanupJob.
func (mr *MockCronJobHandlerInterfaceMockRecorder) TriggerCleanupJob(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerCleanupJob", reflect.TypeOf((*MockCronJobHandlerInterface)(nil).TriggerCleanupJob), c)
}

// TriggerDataSyncJob mocks base method.
func (m *MockCronJobHandlerInterface) TriggerDataSyncJob(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TriggerDataSyncJob", c)
}

// TriggerDataSyncJob indicates an expected call of TriggerDataSyncJob.
func (mr *MockCronJobHandlerInterfaceMockRecorder) TriggerDataSyncJob(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerDataSyncJob", reflect.TypeOf((*MockCronJobHandlerInterface)(nil).TriggerDataSyncJob), c)
}
