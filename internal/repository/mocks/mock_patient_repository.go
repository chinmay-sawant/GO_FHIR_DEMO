// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\repository\patient_repository.go
//
// Generated by this command:
//
//	mockgen -source=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\repository\patient_repository.go -destination=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\internal\repository\mocks\mock_patient_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "go-fhir-demo/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPatientRepositoryInterface is a mock of PatientRepositoryInterface interface.
type MockPatientRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPatientRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockPatientRepositoryInterfaceMockRecorder is the mock recorder for MockPatientRepositoryInterface.
type MockPatientRepositoryInterfaceMockRecorder struct {
	mock *MockPatientRepositoryInterface
}

// NewMockPatientRepositoryInterface creates a new mock instance.
func NewMockPatientRepositoryInterface(ctrl *gomock.Controller) *MockPatientRepositoryInterface {
	mock := &MockPatientRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPatientRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientRepositoryInterface) EXPECT() *MockPatientRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockPatientRepositoryInterface) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Count))
}

// Create mocks base method.
func (m *MockPatientRepositoryInterface) Create(patient *domain.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Create(patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Create), patient)
}

// Delete mocks base method.
func (m *MockPatientRepositoryInterface) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockPatientRepositoryInterface) GetAll(limit, offset int) ([]*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit, offset)
	ret0, _ := ret[0].([]*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPatientRepositoryInterfaceMockRecorder) GetAll(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).GetAll), limit, offset)
}

// GetByID mocks base method.
func (m *MockPatientRepositoryInterface) GetByID(id uint) (*domain.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPatientRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockPatientRepositoryInterface) Update(patient *domain.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Update(patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Update), patient)
}
