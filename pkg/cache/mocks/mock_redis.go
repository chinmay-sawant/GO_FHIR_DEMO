// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Chinmay_Personal_Projects\Go_FHIR_Demo\pkg\cache\redis.go
//
// Generated by this command:
//
//	mockgen -source=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\pkg\cache\redis.go -destination=D:\Chinmay_Personal_Projects\Go_FHIR_Demo\pkg\cache\mocks\mock_redis.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	fhir "github.com/samply/golang-fhir-models/fhir-models/fhir"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheInterface is a mock of CacheInterface interface.
type MockCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockCacheInterfaceMockRecorder is the mock recorder for MockCacheInterface.
type MockCacheInterfaceMockRecorder struct {
	mock *MockCacheInterface
}

// NewMockCacheInterface creates a new mock instance.
func NewMockCacheInterface(ctrl *gomock.Controller) *MockCacheInterface {
	mock := &MockCacheInterface{ctrl: ctrl}
	mock.recorder = &MockCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInterface) EXPECT() *MockCacheInterfaceMockRecorder {
	return m.recorder
}

// DeletePatient mocks base method.
func (m *MockCacheInterface) DeletePatient(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatient indicates an expected call of DeletePatient.
func (mr *MockCacheInterfaceMockRecorder) DeletePatient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatient", reflect.TypeOf((*MockCacheInterface)(nil).DeletePatient), ctx, id)
}

// GetPatient mocks base method.
func (m *MockCacheInterface) GetPatient(ctx context.Context, id string) (*fhir.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatient", ctx, id)
	ret0, _ := ret[0].(*fhir.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatient indicates an expected call of GetPatient.
func (mr *MockCacheInterfaceMockRecorder) GetPatient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatient", reflect.TypeOf((*MockCacheInterface)(nil).GetPatient), ctx, id)
}

// Ping mocks base method.
func (m *MockCacheInterface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCacheInterfaceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCacheInterface)(nil).Ping), ctx)
}

// SetPatient mocks base method.
func (m *MockCacheInterface) SetPatient(ctx context.Context, id string, patient *fhir.Patient, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPatient", ctx, id, patient, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPatient indicates an expected call of SetPatient.
func (mr *MockCacheInterfaceMockRecorder) SetPatient(ctx, id, patient, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPatient", reflect.TypeOf((*MockCacheInterface)(nil).SetPatient), ctx, id, patient, expiration)
}
